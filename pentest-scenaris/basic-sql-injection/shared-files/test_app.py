from flask import Flask, render_template, request, redirect, url_for, session, jsonify
import bcrypt
from sqlalchemy import create_engine
from sqlalchemy.orm import sessionmaker

app = Flask(__name__)

# Récupération de l'ip bdd
with open('/vagrant/shared/dbIpAddr.txt', 'r') as f:
    dbAddr = f.readline().strip()
    print("L'adresse de la bdd est :",dbAddr)
    app.config['MYSQL_HOST'] = dbAddr

app.config['MYSQL_USER'] = 'server'
app.config['MYSQL_PASSWORD'] = '4#j4TA-qNf5yj5M5^3D+'
app.config['MYSQL_DB'] = 'MonSite'

# Créez une URL de connexion à la base de données MySQL
db_url = 'mysql://' + app.config['MYSQL_USER'] +':'+ app.config['MYSQL_PASSWORD'] + '@'+ app.config['MYSQL_HOST'] +'/' + app.config['MYSQL_DB']

# Créez une instance de moteur SQLAlchemy
engine = create_engine(db_url)

# Créez une session pour interagir avec la base de données
Session = sessionmaker(bind=engine)
sessionSql = Session()


@app.route('/')
def index():
    return render_template('templates/index.html')

@app.route('/login', methods=['GET', 'POST'])
def login():
    if request.method == 'POST':
        email = request.form['email']
        password = request.form['password'].encode('utf-8')

        result = sessionSql.execute('SELECT * FROM utilisateurs WHERE Email = %s', (email,))
        utilisateur = jsonify([dict(row) for row in result])

        if utilisateur and bcrypt.checkpw(password, utilisateur[2].encode('utf-8')) or password == utilisateur[2]:
            session['email'] = email
            return redirect(url_for('dashboard'))
        else:
            return 'Identifiants incorrects. Veuillez réessayer.'

    return render_template('templates/login.html')


@app.route('/logout')
def logout():
    session.pop('email', None)
    return redirect(url_for('index'))

# Importez aussi les bibliothèques nécessaires, notamment request

@app.route('/ajouter', methods=['GET', 'POST'])
def ajouter():
    if 'email' in session:
        if request.method == 'POST':
            element = request.form['url']
            mail = session['mail']

            # Ajoutez l'élément dans la base de données
            result = sessionSql.execute('INSERT INTO Users (mail, url) VALUES (%s, %s)', (mail, element))

        return render_template('templates/ajouter.html')
    else:
        return redirect(url_for('login'))

@app.route('/mes_photos')
def mes_photos():
    if 'email' in session:
        email = session['email']

        # Récupérez les éléments de l'utilisateur depuis la base de données
        photos = sessionSql.execute('SELECT url FROM photos WHERE Email = %s', (email,))

        return render_template('templates/mes_photos.html', urls=photos)
    else:
        return redirect(url_for('login'))



if __name__ == '__main__':
    app.run(debug=True)
