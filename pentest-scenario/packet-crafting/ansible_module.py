# Dans un cadre d'études

import socket
import struct
from ansible.module_utils.basic import AnsibleModule

def main():
    module = AnsibleModule(
        argument_spec=dict(
            ip_dest = dict(required=True, type='str'),
            ip_source = dict(required=True, type='str'),
            port_dest = dict(required=True, type='int'),
            port_source = dict(required=True, type='int'),
            seq_number = dict(required=True, type='int'),
            ack_number = dict(required=True, type='int'),
        )
    )

    sock = socket.socket(socket.AF_INET, socket.SOCK_RAW, socket.IPPROTO_RAW)

    ip_dest = module.params.get('ip_dest')
    ip_source = module.params.get('ip_source')
    port_dest = module.params.get('port_dest')
    port_source = module.params.get('port_source')
    seq_number = module.params.get('seq_number')
    ack_number = module.params.get('ack_number')


    syn_flag = 1  # SYN flag pour l'établissement de la connexion
    ack_flag = 0  # ACK flag (dépend de la situation)
    fin_flag = 0  # FIN flag (dépend de la situation)
    rst_flag = 0  # RST flag (dépend de la situation)

    tcp_header = struct.pack('!HHIIBBHHH', port_source, port_dest, seq_number, ack_number, 5 << 4, (syn_flag << 1) | fin_flag | (rst_flag << 2), 8192, 0, 0)

    ip_source_bin = socket.inet_aton(ip_source)
    ip_dest_bin = socket.inet_aton(ip_dest)
    ip_header = struct.pack('!BBHHHBBH4s4s', 69, 0, 20 + len(tcp_header), 54321, 0, 64, socket.IPPROTO_TCP, 0, ip_source_bin, ip_dest_bin)
    packet = ip_header + tcp_header
    sock.sendto(packet, (ip_dest, port_dest))
    # sock.close()

    # module.exit_json(changed=False, resultat = ) #ici faudrait faire un truc pour voir si on a bien reçu le SYN-ACK je pense


if __name__=="__main__":
    main()
